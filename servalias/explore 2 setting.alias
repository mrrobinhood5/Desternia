tembed -thumb <image> -color <color>
<drac2>
pargs, me, settingsCVAR, settingType  = argparse(&ARGS&), character(), "ExploreSettings", False
settings = {"setting": "Test Area", "type": "public", "position": "begin", "prereqs": []}
isPrivate, isPublic = False, False
returnstr = f' -title "Exploration Alias!" -desc "Updating your current Setting:"'
savestr = ""
# runs the booleans
setPUB = True if pargs.get("public") else False
setPRIV = True if pargs.get("private") else False

# checks to see what kind of libraries exist
if exists("library"):
    if len(library) == 32 and library.count("-") == 4:
        isPublic, isPrivate = True, False
    else:
        amIaCVAR = get(library, False)
        if amIaCVAR:
            isPrivate, isPublic = True, False
hasServerLib = get_svar("serverlibrary", False)

#grabs the current configuration
hasSettings = get(settingsCVAR, False)

# if default settings do not exists, make the default ones
if not hasSettings:
    me.set_cvar_nx("library", "6e7a3d5d-9261-435a-9944-c82ce243b4d4")
    me.set_cvar_nx(settingsCVAR, dump_json(settings))

# load either the default settings or your current ones
loadedSettings = load_json(get(settingsCVAR))
currentSetting = loadedSettings["setting"]

# check to see if you are trying to set a public
if setPUB:
    # check to see if you actually passed a valid GVAR
    passedGVAR = pargs.last("public")
    validGVAR = True if len(passedGVAR) == 36 and passedGVAR.count("-") == 4 else False
    if validGVAR:
        me.set_cvar("library", passedGVAR)
        returnstr += f' -f "Public Library| You have set your `library` to `{passedGVAR}`\n\n'\
                     f'The following settings are now available:\n\n'
        publicLibrary = load_json(get_gvar(library))
        for savedsetting in publicLibrary.keys():
            returnstr += f'{savedsetting}:\n>>*{publicLibrary[savedsetting]["description"]}*\n '
        returnstr += f'"'
        newSetting = list(publicLibrary.keys())[0]
        newPosition = publicLibrary[newSetting]["begin"]
        settings.update({"setting": newSetting, "position": newPosition, "type": "public"})
    else:
        err("You must pass in a valid GVAR ID")

# if you passed a -private arg to set a private setting
elif setPRIV:
    # check to see if the cvar exists
    passedCVAR = pargs.last("private")
    loadedCVAR = get(passedCVAR, False)
    if not loadedCVAR:
        err("That CVAR does not exists")
    privateLibrary = load_json(loadedCVAR)
    me.set_cvar("library", passedCVAR)
    returnstr += f' -f "Private Library| You have set your `library` to `{passedCVAR}`\n\n' \
                 f'The following settings are now available:\n\n'
    for savedsetting in privateLibrary.keys():
        returnstr += f'{savedsetting}:\n>>*{privateLibrary[savedsetting]["description"]}*\n '
    returnstr += f'"'
    # sets the settings to the first one in the library
    newSetting = list(privateLibrary.keys())[0]
    newPosition = privateLibrary[newSetting]["begin"]
    settings.update({"setting":newSetting, "position":newPosition, "type":"private"})

# if you pass just setting
if not setPUB and not setPRIV and "&*&" != "":
    selectedSetting = "&*&".lower()
    # gonna iterate through all libraries starting with private, then public, then server
    if hasServerLib:

        serverLib = load_json(get_gvar(get_svar("serverlibrary")))
        for savedsetting in serverLib.keys():
            if selectedSetting in savedsetting.lower():
                settingType = "server"
                settings.update({"setting": savedsetting, "position": list(serverLib[savedsetting])[0], "type": "server"})
                me.set_cvar(settingsCVAR, dump_json(settings))
                savestr += f' -f "Setting Update|Your setting is now `{savedsetting}` in the `{settingType}` library"'

    if isPublic and not settingType:
        publicLib = load_json(get_gvar(library))
        settingType = "public"
        for savedsetting in publicLib.keys():
            if selectedSetting in savedsetting.lower():
                settingType = "public"
                settings.update({"setting": savedsetting, "position": list(publicLib[savedsetting])[0], "type": "public"})
                me.set_cvar(settingsCVAR, dump_json(settings))
                savestr += f' -f "Setting Update|Your setting is now `{savedsetting}` in the `{settingType}` library"'

    if isPrivaten and not settingType:
        privateLib = load_json(get(library))
        for savedsetting in privateLib.keys():
            if selectedSetting in savedsetting.lower():
                settingType = "private"
                settings.update({"setting": savedsetting, "position": list(privateLib[savedsetting])[0], "type": "private"})
                me.set_cvar(settingsCVAR, dump_json(settings))
                savestr += f' -f "Setting Update|Your setting is now `{savedsetting}` in the `{settingType}` library"'

    if not settingType:
        savestr += f' -f "Setting Error|That setting was not found in any library. Make sure you have already loaded the library"'
    returnstr += savestr
returnstr += f' -f "Usage|`!explore setting -private CVAR-NAME` to set a private CVAR library\n' \
             f'`!exlore setting -public GVAR-ID` to set a public GVAR library\n' \
             f'`!svar serverlibrary GVAR-ID` to set the server library (must be DragonSpeaker or Admin)"'

return returnstr
</drac2>