embed -title "DM awarded you something!" -thumb <image> -color <color>
<drac2>
pargs, returnstr, keyReturned, me = argparse(&ARGS&), "", "", character()
isKey, isTrap = True if pargs.get("key") else False, True if pargs.get("trap") else False
abcarray = ["ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz0123456789",
            "NOPQRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm9876543210"]
# checks for key
if isKey or isTrap:
    # checks for targets passed, otherwise error out
    if pargs.get("t"):
        # checks to see if target is combat otherwise error out
        if pargs.last("t") in str([x.name.lower() for x in combat().combatants]):
            # set the variables from the passed values
            keyProvided = pargs.last("key") if isKey else False
            trapDisabled = pargs.last("trap") if isTrap else False
            # grab the string of the PC notes and save it in individual character settings
            playerCharacterSettings = combat().get_combatant(pargs.last("t")).note.split(" | ")
            # skips if its blank or no options
            if ':' not in str(playerCharacterSettings):
                pass
            else:
                playerCharacterSettings = {x[0].lower(): x[1] for x in [item.split(": ") for item in playerCharacterSettings]}
            # grabs the previous prereqs if any DEPRECATED, will not use CVAR loading except for setting
            # savedExploreSettings = load_json(get(settingsCVAR))
            # if you passed a key
            if keyProvided:
                for letter in keyProvided:
                    keyReturned += abcarray[1][abcarray[0].index(letter)]
                if "keys" in playerCharacterSettings.keys():
                    existingKeys = playerCharacterSettings["keys"] + ","
                else:
                    existingKeys = ""
                returnstr += f' -f "Key|The {keyReturned} has been awarded by {ctx.author.display_name}"'
                # DEPRECATED WILLL NOT BE SAVING STUFF TO CVAR, JUST INIT
                # savedExploreSettings["prereqs"].append(pargs.last("key"))
                # writes out the data into init and cvar
                playerCharacterSettings.update({"keys": existingKeys+keyReturned})
                dataout = ' | '.join([f"{item[0].title()}: {item[1]}" for item in playerCharacterSettings.items()])
                combat().get_combatant(pargs.last("t")).set_note(dataout)
                # key needs to go into "prereqs" in cvar exploresettings DEPRECATED NO MORE CVAR SAVING
                # me.set_cvar(settingsCVAR, dump_json(savedExploreSettings))
            # if you passed a trap disable
            if trapDisabled:
                initExploreSettings = load_json(str(combat().get_combatant("explore").get_effect("settings").effect["attack"]["details"]))
                # check to see if traps have anything in there to make a check to see if it exists already
                if len(initExploreSettings["traps"]) > 0:
                    if trapDisabled in initExploreSettings["traps"]:
                        trapDisabled = ""
                #save settings to init settings of character
                initExploreSettings["traps"].append(trapDisabled) if trapDisabled != "" else 0
                returnstr += f' -f "Trap|The {trapDisabled} has been disabled by {combat().get_combatant(pargs.last("t")).name}"'
                # save the stuff into init settings
                combat().get_combatant("explore").add_effect("settings", f"""-attack '||{initExploreSettings}'""", -1, False, None, False,None)
        else:
            err("That target is not in combat, oops")
    else:
        err('You must provide target or targets like `!e award -t "name"`')
else:
    err('You must provide a key with `-key "keyname"` or trap name with `-trap "trap name"`')
    returnstr += f' -f "Help|Give keys or disable traps with `!e award -t \"name\" -key \"keyname\" -trap \"trapname\"`"'
return returnstr
</drac2>
