tembed -color <color>
<drac2>
# TODO: move monsters out of the group once they are activated (cant do this until the next update)
# TODO: Add a "You are dead" check if your HP is below 0
# TODO: Fix the CVAR thing for private libraries
# DONE: TRAPS add trap names and effects to player
# DONE: have e award save the info on the player notes like map
# TODO: add a DM name to the DM combatant as a note so that only he can drive
# DONE: FOW needs to add to current FOW just like prepreqs
# DONE: Make traps attack roll or save option
# TODO: have a overmap view option
# TODO: passive perception checks on traps
# DONE: reading the FOWs arent doing it right
# from Desternia.FakeTestingStuff import *
# sets default variables
me, settingsCVAR, returnstr, saveAbility, mImgData, monsterstr, trapStr  = character(), "ExploreSettings", "", "", "", "", ""
hasMonsters, isAllowed, isBar, validNextPosition, inCombat, hasTrap, useMap, mapViewLoader = False, True, False, False, False, False, False, False
abcarray = ["ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz0123456789",
            "NOPQRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm9876543210"]
defaultSettings = {"setting" : "Small Town","type" : "public", "position" : "begin","prereqs" : [], "monsters" : []}
me.set_cvar_nx("library", "6e7a3d5d-9261-435a-9944-c82ce243b4d4")
me.set_cvar_nx(settingsCVAR, dump_json(defaultSettings))

# need to decide where to load the savedSettingsFrom, either init or CVAR. 
if combat(): #check to see if combat is running else error out. It should always be running.
    inCombat = True
    # check to see if you have a DM group and explore is loaded, else error out
    if "explore" in [x.name for x in combat().get_group("DM").combatants]:
      #check to see if there are settings already available to grab from INIT else load them from CVAR
      if "settings" in [x.name for x in combat().get_combatant("explore").effects]:
        savedExploreSettings = load_json(str(combat().get_combatant("explore").get_effect("settings").effect["attack"]["details"]))
      else:
        savedExploreSettings = load_json(get(settingsCVAR))
    else:
      err("You need to add an explore combatant like this `!i add 0 explore -group \"DM\" -p 0`")
else:
    err("Please start the battle with `!bplan begin <setting name>`")

# cvarData = get("library") if savedExploreSettings['type'] == "private" else 0
loadedData = load_json(get_gvar(get("library"))) if savedExploreSettings['type'] == "public" else load_json(get_gvar(get_svar("serverlibrary"))) if savedExploreSettings['type'] == "server" else load_json(get(cvarData))

# need to load prereqs from notes.
activePrereqs = combat().me.note

## MAIN LOGIC ##
# checks to see if you provided a good and valid Next Position from the choices of your current position and loads it.
typedPosition = "&*&"
# loads combatants into init
# sets nextPosition to the default, which is the current position saved in settings
nextPosition = loadedData[savedExploreSettings['setting']][savedExploreSettings['position']]
if typedPosition != "":
    # iterates over the settings sources
    for position in loadedData[savedExploreSettings['setting']][savedExploreSettings['position']]['choices']:
        # if it finds a match, it means that its a valid next position
        if typedPosition.lower() in position.lower():
            # before saving, needs to check if theres a barred requirement
            if "not" in loadedData[savedExploreSettings['setting']][position].keys():
                isBar = True if any(item in savedExploreSettings['prereqs'] for item in loadedData[savedExploreSettings['setting']][position]["not"]) else False
            # if you are not barred from the next position check to see if you have the prereqs for this position
            if "requires" in loadedData[savedExploreSettings['setting']][position].keys() and not isBar:
                # need to decode the key
                isAllowed = False
                keyReturned = combat().me.note.split(" | ")
                keyReturned = {x[0].lower(): x[1] for x in [item.split(": ") for item in keyReturned]}
                # check for keys being available otherwise skill it
                if "keys" in keyReturned.keys():
                    keyReturned = keyReturned["keys"].split(",")
                    decryptedKeys = []
                    for key in keyReturned:
                        decryptedKey = ""
                        for letter in key:
                            decryptedKey += abcarray[1][abcarray[0].index(letter)]
                        decryptedKeys.append(decryptedKey)
                    isAllowed = True if any(item in decryptedKeys for item in loadedData[savedExploreSettings['setting']][position]["requires"]) else False
                if isAllowed == False:
                    isAllowed = True if any(item in savedExploreSettings['prereqs'] for item in loadedData[savedExploreSettings['setting']][position]["requires"]) else False

                # checks for new prereqs and appends them to the new settings

            if not isBar and isAllowed:
                # If you are allowed and not barred, set the next postition to what you typed
                nextPosition = loadedData[savedExploreSettings['setting']][position]
                # save it to settings for the next time this loop runs
                savedExploreSettings.update({"position": position})
                #adds the earns for the next position.
                if "earns" in nextPosition.keys():
                    for x in nextPosition['earns']:
                        if x not in savedExploreSettings['prereqs']:
                            savedExploreSettings['prereqs'].append(x)
                #this is where traps get loaded n stuff
                if inCombat and "trap" in loadedData[savedExploreSettings['setting']][position].keys():
                    hasTrap = True
                    #decide what kinda trap it is
                    trapName = loadedData[savedExploreSettings['setting']][position]["trap"]["name"]
                    trapToFind = loadedData[savedExploreSettings['setting']][position]["trap"]["tofind"]
                    trapDamage = loadedData[savedExploreSettings['setting']][position]["trap"]["damage"]
                    passiveSkills = [combat().me.skills.perception.value, combat().me.skills.investigation.value]
                    passiveNames = ["perception", "investigation"]
                    passiveSkill = max(passiveSkills)
                    passiveName = passiveNames[passiveSkills.index(max(passiveSkills))]
                    # check to see if you can find the trap first
                    if passiveSkill+10 >= trapToFind:
                        trapStr = f' -f "Trap - {trapName}|Passive {passiveName.capitalize()}: {passiveSkill}\nDC: {trapToFind}\nYou have found a trap. No damage taken"'
                    else:
                        if loadedData[savedExploreSettings['setting']][position]["trap"]["type"] == "attack":
                            trapToHit = loadedData[savedExploreSettings['setting']][position]["trap"]["tohit"]
                            trapRoll = vroll("1d20+"+str(trapToHit))
                            if trapRoll.total >= combat().me.ac:
                                damageRoll = combat().me.damage(trapDamage)
                            else:
                                damageRoll = False
                            trapStr = f' -f "Trap - {trapName}|AC: {combat().me.ac}\nRoll: {trapRoll.full}\n{damageRoll["damage"] if damageRoll else "Miss!"}"'
                        if loadedData[savedExploreSettings['setting']][position]["trap"]["type"] == "save":
                            trapDC = loadedData[savedExploreSettings['setting']][position]["trap"]["dc"]
                            saveAbility = str(loadedData[savedExploreSettings['setting']][position]["trap"]["save"]).capitalize()
                            trapSave = combat().me.save(saveAbility)
                            if trapSave.total < trapDC:
                                damageRoll = combat().me.damage(trapDamage)
                            else:
                                damageRoll = False
                            trapStr = f' -f "Trap - {trapName}|DC: {trapDC}\n{saveAbility} Save: {trapSave}\n{damageRoll["damage"] if damageRoll else "Saved!"}"'
                #this is where the monsters get loaded into init
                if inCombat and "monsters" in loadedData[savedExploreSettings['setting']][position].keys():
                    hasMonsters = True
                    # iterates through all monsters being loaded
                    for monster, mdata in loadedData[savedExploreSettings['setting']][position]["monsters"].items():
                        # checks to see if you already loaded this one, it wont reload it.
                        if monster in savedExploreSettings["monsters"]:
                          hasMonsters = False
                          continue
                        else:
                            # adds the note to the monster for map data and push them to a variable
                            combat().get_combatant(monster).set_note(f'Location: {mdata[1]} | Token: {mdata[2]} | Size: {mdata[3]} | Color: {mdata[4]}')
                            # re rolls their INIT
                            combat().get_combatant(monster).set_init(vroll("1d20+"+str(combat().get_combatant(monster).initmod)).total)
                            # moves it out of DM group # not implemented yet PR #1383
                            # combat().get_combatant(monster).set_group(None)
                            #re names them
                            combat().get_combatant(monster).set_name(mdata[0])
                            # adds it to the saved Settings that its been loaded
                            savedExploreSettings["monsters"].append(monster) if monster not in savedExploreSettings["monsters"] else 0
                # this is where map updates its stuff for new viewports
                if "map" in nextPosition.keys():
                    mapViewLoader = nextPosition["map"] # settings from the room
                    currentmap = combat().get_combatant("map").get_effect("map").effect["attack"]["details"].split(" ~ ") #currentmap on init
                    #load and update the map settings before it builds the image
                    currentmap = {x[0].lower(): x[1] for x in [item.split(": ") for item in currentmap]}
                    #merges old and new fow to keep it running
                    if  mapViewLoader["fow"] in currentmap["fow"]:
                        newfow = currentmap["fow"]
                    else:
                        newfow = currentmap["fow"]+", "+mapViewLoader["fow"]
                    currentmap.update({"fow":newfow, "view":mapViewLoader["view"]})
                    dataout = ' ~ '.join([f"{item[0].title()}: {item[1]}" for item in currentmap.items()])
                    combat().get_combatant("map").add_effect("map",f"""-attack '||{dataout}'""", -1, False, None, False,None)
            # if anything fails, like being barred or not allowed, save the settings to the previous thing
            else:
                savedExploreSettings.update({"position": savedExploreSettings['position']})
        # if what you typed is not in the possible places
        else:
            nextPosition = loadedData[savedExploreSettings['setting']][savedExploreSettings['position']]
            savedExploreSettings.update({"position": savedExploreSettings['position']})
#saves the new settings to both cvar and init 
me.set_cvar(settingsCVAR, dump_json(savedExploreSettings))
combat().get_combatant("explore").add_effect("settings",f"""-attack '||{ExploreSettings}'""", -1, False, None, False,None)
# check to see if there is a map call or a custom image
if "image" in nextPosition.keys():
    hasImage = True if nextPosition["image"] != "map" else False
    useMap = True if nextPosition["image"] == "map" else False
hasThumb = True if "thumb" in nextPosition.keys() else False
# build the map string for init
if useMap:
    # mapstring being built as a dict
    mapstr = combat().get_combatant("map").get_effect("map").effect["attack"]["details"].split(" ~ ")
    mapstr = {x[0].lower(): x[1] for x in [item.split(": ") for item in mapstr]}
    ## the Monsters in Init need to be build again for the image. Gonna have to iterate through all combatants for a Location and Token
    for monster in combat().combatants:
        if monster.note == None or monster.note == '':
            continue
        else:
            mData = monster.note.split(" | ")
            mData = {x[0].lower(): x[1] for x in [item.split(": ") for item in mData]}
            mData.update({"color": mData["color"]}) if "color" in mData.keys() else mData.update({"color": "r"})
            mData.update({"size": mData["size"]}) if "size" in mData.keys() else mData.update({"size": "M"})
            monsterstr += f'{mData["location"]}{mData["size"]}{mData["color"]}-{monster.name.replace(" ","_")}{"~"+mData["token"] if "token" in mData.keys() else ""}/'
    mapstr = f'http://otfbm.io/{mapstr["size"]}/{mapstr["view"]}/@{mapstr["options"]}/*f{mapstr["fow"].replace(", ","/*f").replace(":","")}/{monsterstr}?bg={mapstr["background"]}'
    # push the new update to map attack

#builds the embed for the old setting
returnstr += f' -title "{savedExploreSettings["setting"]}: {savedExploreSettings["position"]} " '
returnstr += trapStr
returnstr += f' -f "Monsters|New Monsters Appeared in INIT!\nCheck `!i list`"' if hasMonsters else f''
returnstr += f' -f "Error| You are barred from this location" ' if isBar else f''
returnstr += f' -f "Error| You do not have the requirements for this location" ' if not isAllowed else f''
returnstr += f' -f "Description|{nextPosition["description"]}"' # if isAllowed and not isBar else f''
returnstr += f' -f "Choices|{nextPosition["choices"]}"' # if isAllowed and not isBar else f''
returnstr += f' -image {mapstr}' if useMap else f''
returnstr += f' -image "{nextPosition["image"]}"' if hasImage else f''
returnstr += f' -thumb "{nextPosition["thumb"]}"' if hasThumb else f' -thumb <image>'

# sets the footer
returnstr += f' -footer "!e <area name>\n' \
             f'For the Help Page:\n'\
             f'!help e\n\n'\
             f'{combat().me if inCombat else "<-- Not in Combat -->"}"'
return returnstr
</drac2>