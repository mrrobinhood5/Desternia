tembed -color <color>
<drac2>
# TODO: move monsters out of the group once they are activated (cant do this until the next update)
# TODO: Add a "You are dead" check if your HP is below 0
# DONE: Fix the CVAR thing for private libraries
# DONE: TRAPS add trap names and effects to player
# DONE: have e award save the info on the player notes like map
# DONE: add a DM name to the DM combatant as a note so that only he can drive
# DONE: FOW needs to add to current FOW just like prepreqs
# DONE: Make traps attack roll or save option
# DONE: have a overmap view option
# DONE: keys need to updated explore settings in init
# DONE: passive perception checks on traps
# DONE: Add trap disabling. just like award key, add it to global settings and a check for a disabled trap
# DONE: Get rid of saving stuff to CVAR, replace with writing settings to INIT
# DONE: Get the current position from your own CVAR so that you can split the party
# DONE: reading the FOWs arent doing it right
# DONE: Previous instances of the ExploreSetting CVAR are not being checked for and can cause a player to end up in positions
# TODO: Add trap descriptions and effects
# DONE: When a new monster appears, say the name on the first embed
# TODO: Small town settings errors out on road because there is no location information. Maybe add a default location on a bplan

# from Desternia.FakeTestingStuff import *

# sets default variables
me, settingsCVAR, returnstr, saveAbility, mImgData, monsterStr, trapStr, monNames  = character(), "ExploreSettings", "", "", "", "", "", ""
hasMonsters, isAllowed, isBar, validNextPosition, hasTrap, useMap, mapViewLoader = False, True, False, False, False, False, False
DMmode = False
abcarray = ["ABCDEFGHIJKLMabcdefghijklmNOPQRSTUVWXYZnopqrstuvwxyz0123456789",
            "NOPQRSTUVWXYZnopqrstuvwxyzABCDEFGHIJKLMabcdefghijklm9876543210"]
defaultPlayerSettings = {"position": "begin" , "keys": []}
# first check to see if whoever is running this has settings. otherwise error out to do e setting
# Order of operations:
# - Pull from Init
# - Push Player Changes
# - Execute Code and changes to locations
# - Push game changes to Init
# -

if combat():
    if combat().me:
        if combat().current == None:
            err("You gotta start init with `!init next`")
        if combat().current.name != combat().me.name:
            err("Its uh, not your turn. Wait your turn")
        if "explore" in [x.name for x in combat().combatants]:
            if "settings" in [x.name for x in combat().get_combatant("explore").effects]:
                # Pull Settings from here to savedInitSettings
                savedInitSettings = load_json(combat().get_combatant("explore").get_effect("settings").effect["attack"]["details"])
                # check to see if player has settings otherwise load defaults
                if not exists("ExploreSettings"):
                    me.set_cvar("ExploreSettings",dump_json(defaultPlayerSettings))
                # push player keys
                savedPlayerSettings = load_json(ExploreSettings)
                # pass on any new keys from the player to init
                if "dm" not in savedPlayerSettings.keys():
                    for key in savedPlayerSettings["keys"]:
                        savedInitSettings["keys"].append(key) if key not in savedInitSettings["keys"] else 0
            else:
                # there are no settings, need to push some on there if you are the DM
                savedPlayerSettings = load_json(ExploreSettings)
                if "dm" in savedPlayerSettings.keys():
                    # you are a DM so push your settings to init for the first time
                    combat().get_combatant("explore").add_effect("settings", f"""-attack '||{dump_json(savedPlayerSettings)}'""", -1,False, None, False, None)
                    savedInitSettings = load_json(combat().get_combatant("explore").get_effect("settings").effect["attack"]["details"])
                else:
                    # you are not a DM you cant push initial settings.
                    err("DM needs to run the command first to load settings.")
        else:
            err("there is no combatant named explore. add one with !i add 0 explore")
    else:
        err("you are not in combat. join in with !i join")
else:
    err("Not in combat, you need to start init")

# load the whole library from the setting in init
if savedInitSettings["type"] == "server":
    loadedData = load_json(get_gvar(get_svar("serverexplorelibrary")))[savedInitSettings["setting"]]
elif savedInitSettings["type"] == "local":
    loadedData = load_json(get_gvar(explorelibrary))[savedInitSettings["setting"]]
else:
    err("something is wrong with the init settings bruh")
    
## MAIN LOGIC ##
# checks to see if you provided a good and valid Next Position from the choices of your current position and loads it.
typedPosition = "&*&"
# sets nextPosition to the default, which is the current position saved in settings
nextPosition = loadedData[savedPlayerSettings['position']]
if typedPosition != "":
    # iterates over the settings sources
    for position in loadedData[savedPlayerSettings['position']]['choices']:
        # if it finds a match, it means that its a valid next position
        if typedPosition.lower() in position.lower():
            #### BARS BARS BARS ###
            # before saving, needs to check if theres a barred requirement
            if "not" in loadedData[position].keys():
                isBar = True if any(item in savedInitSettings['prereqs'] for item in loadedData[position]["not"]) else False
            ### PREREQS PREREQS PREREQS ###
            # if you are not barred from the next position check to see if you have the prereqs or keys for this position
            if "requires" in loadedData[position].keys() and not isBar:
                # need to decode the key
                isAllowed = False
                keyReturned = combat().me.note.split(" | ")
                keyReturned = {x[0].lower(): x[1] for x in [item.split(": ") for item in keyReturned]}
                ### KEYS KEYS KEYS ###
                # check for keys first at the user who ran the command, if not found, checks to see see if doors been open before.
                if "keys" in keyReturned.keys():
                    keyReturned = keyReturned["keys"].split(",")
                    decryptedKeys = []
                    for key in keyReturned:
                        decryptedKey = ""
                        for letter in key:
                            decryptedKey += abcarray[1][abcarray[0].index(letter)]
                        decryptedKeys.append(decryptedKey)
                    isAllowed = True if any(item in decryptedKeys for item in loadedData[position]["requires"]) else False
                    savedInitSettings.update({"prereqs":decryptedKeys})
                if isAllowed == False:
                    isAllowed = True if any(item in savedInitSettings['prereqs'] for item in loadedData[position]["requires"]) else False
            if not isBar and isAllowed:
                # If you are allowed and not barred, set the next postition to what you typed
                nextPosition = loadedData[position]
                # save it to settings for the next time this loop runs
                savedPlayerSettings.update({"position": position})
                ### EARNS EARNS EARNS ###
                # adds the earns for the next position.
                if "earns" in nextPosition.keys():
                    for x in nextPosition['earns']:
                        if x not in savedInitSettings['prereqs']:
                            savedInitSettings['prereqs'].append(x)
                ### TRAPS TRAPS TRAPS
                # this is where traps get loaded n stuff
                if "trap" in loadedData[position].keys():
                    hasTrap = True
                    #decide what kinda trap it is
                    trapName = loadedData[position]["trap"]["name"]
                    trapToFind = loadedData[position]["trap"]["tofind"]
                    trapDamage = loadedData[position]["trap"]["damage"]
                    passiveSkills = [combat().me.skills.perception.value, combat().me.skills.investigation.value]
                    passiveNames = ["perception", "investigation"]
                    passiveSkill = max(passiveSkills)+10
                    passiveName = passiveNames[passiveSkills.index(max(passiveSkills))]
                    if trapName in savedInitSettings["traps"]:
                        hasTrap = False
                    if hasTrap:
                        # check to see if you can find the trap first
                        if passiveSkill >= trapToFind:
                            trapStr = f' -f "Trap - {trapName}|Passive {passiveName.capitalize()}: {passiveSkill}\nDC: {trapToFind}\nYou have found a trap. No damage taken. Trap is still active though.."'
                        else:
                            if loadedData[position]["trap"]["type"] == "attack":
                                trapToHit = loadedData[position]["trap"]["tohit"]
                                trapRoll = vroll("1d20+"+str(trapToHit))
                                if trapRoll.total >= combat().me.ac:
                                    damageRoll = combat().me.damage(trapDamage)
                                else:
                                    damageRoll = False
                                trapStr = f' -f "Trap - {trapName}|AC: {combat().me.ac}\nRoll: {trapRoll.full}\n{damageRoll["damage"] if damageRoll else "Miss!"}"'
                            if loadedData[position]["trap"]["type"] == "save":
                                trapDC = loadedData[position]["trap"]["dc"]
                                saveAbility = str(loadedData[position]["trap"]["save"]).capitalize()
                                trapSave = combat().me.save(saveAbility)
                                if trapSave.total < trapDC:
                                    damageRoll = combat().me.damage(trapDamage)
                                else:
                                    damageRoll = False
                                trapStr = f' -f "Trap - {trapName}|DC: {trapDC}\n{saveAbility} Save: {trapSave}\n{damageRoll["damage"] if damageRoll else "Saved!"}"'
                
                ### MONSTER MONSTER MONSTER ###
                #this is where the monsters get loaded into init
                if "monsters" in loadedData[position].keys():
                    hasMonsters = True
                    # iterates through all monsters being loaded
                    for monster, mdata in loadedData[position]["monsters"].items():
                        # checks to see if you already loaded this one, it wont reload it.
                        if monster in savedInitSettings["monsters"]:
                          hasMonsters = False
                          continue
                        else:
                            # adds the note to the monster for map data and push them to a variable
                            combat().get_combatant(monster).set_note(f'Location: {mdata[1]} | Token: {mdata[2]} | Size: {mdata[3]} | Color: {mdata[4]}')
                            # re rolls their INIT
                            monInit = vroll("1d20+"+str(combat().get_combatant(monster).initmod))
                            combat().get_combatant(monster).set_init(monInit.total)
                            # moves it out of DM group # not implemented yet PR #1383
                            # combat().get_combatant(monster).set_group(None)
                            #re names them
                            combat().get_combatant(monster).set_name(mdata[0])
                            #buils the name string for the embed:
                            monNames += f'`{mdata[0]}` Init: {monInit.full}\n'
                            # adds it to the saved Settings that its been loaded
                            savedInitSettings["monsters"].append(monster) if monster not in savedInitSettings["monsters"] else 0
                
                ### MAP MAP MAP ###
                # this is where map updates its stuff for new viewports
                if "map" in nextPosition.keys():
                    mapViewLoader = nextPosition["map"] # settings from the room
                    currentmap = combat().get_combatant("map").get_effect("map").effect["attack"]["details"].split(" ~ ") #currentmap on init
                    #load and update the map settings before it builds the image
                    currentmap = {x[0].lower(): x[1] for x in [item.split(": ") for item in currentmap]}
                    #merges old and new fow to keep it running
                    if  mapViewLoader["fow"] in currentmap["fow"]:
                        newfow = currentmap["fow"]
                    else:
                        newfow = currentmap["fow"]+", "+mapViewLoader["fow"]
                    currentmap.update({"fow":newfow, "view":mapViewLoader["view"]})
                    dataout = ' ~ '.join([f"{item[0].title()}: {item[1]}" for item in currentmap.items()])
                    combat().get_combatant("map").add_effect("map",f"""-attack '||{dataout}'""", -1, False, None, False,None)
                    savedPlayerSettings.update({"view": currentmap["view"]})
            
            ### ERROR CHECKS ERROR CHECKS ###
            # if anything fails, like being barred or not allowed, save the settings to the previous thing
            else:
                savedPlayerSettings.update({"position": savedPlayerSettings['position']})
        # if what you typed is not in the possible places
        else:
            nextPosition = loadedData[savedPlayerSettings['position']]
            savedPlayerSettings.update({"position": savedPlayerSettings['position']})

########## SAVES ALL STUFF BACK TO INIT #################
#saves the new settings to both cvar and init

me.set_cvar("ExploreSettings", dump_json(savedPlayerSettings))
## Only some stuff gets put here
combat().get_combatant("explore").add_effect("settings",f"""-attack '||{dump_json(savedInitSettings)}'""", -1, False, None, False,None)

######## LOADS THE IMAGE FOR THE EMBED ############
# check to see if there is a map call or a custom image
if "image" in nextPosition.keys():
    hasImage = True if nextPosition["image"] != "map" else False
    useMap = True if nextPosition["image"] == "map" else False
hasThumb = True if "thumb" in nextPosition.keys() else False

########## MAP MAP MAP ####################
# build the map string for init
if useMap:
    # mapstring being built as a dict
    mapstr = combat().get_combatant("map").get_effect("map").effect["attack"]["details"].split(" ~ ")
    mapstr = {x[0].lower(): x[1] for x in [item.split(": ") for item in mapstr]}
    ## the Monsters in Init need to be build again for the image. Gonna have to iterate through all combatants for a Location and Token
    for monster in combat().combatants:
        if monster.note == None or monster.note == '':
            continue
        else:
            mData = monster.note.split(" | ")
            mData = {x[0].lower(): x[1] for x in [item.split(": ") for item in mData]}
            mData.update({"color": mData["color"]}) if "color" in mData.keys() else mData.update({"color": "b"})
            mData.update({"size": mData["size"]}) if "size" in mData.keys() else mData.update({"size": "M"})
            monsterStr += f'{mData["location"]}{mData["size"]}{mData["color"]}-{monster.name.replace(" ","_")}{"~"+mData["token"] if "token" in mData.keys() else ""}/'
    mapstr.update({"view":savedPlayerSettings["view"]}) if "view" in savedPlayerSettings.keys() else 0
    mapstr = f'http://otfbm.io/{mapstr["size"]}/{mapstr["view"]}/@{mapstr["options"]}/*f{mapstr["fow"].replace(", ","/*f").replace(":","")}/{monsterStr}?bg={mapstr["background"]}'
    # push the new update to map attack

########## EMBED EMBED EMBED #####################
#builds the embed for the old setting
returnstr += f' -title "{savedInitSettings["setting"]}: {savedPlayerSettings["position"]} " '
returnstr += trapStr
returnstr += f' -f "Monsters|New Monsters Appeared in INIT!\n{monNames}"' if hasMonsters else f''
returnstr += f' -f "Error| You are barred from this location" ' if isBar else f''
returnstr += f' -f "Error| You do not have the requirements for this location" ' if not isAllowed else f''
returnstr += f' -f "Description|{nextPosition["description"]}"' # if isAllowed and not isBar else f''
returnstr += f' -f "Choices|{nextPosition["choices"]}"' # if isAllowed and not isBar else f''
returnstr += f' -image {mapstr}' if useMap else f''
returnstr += f' -image "{nextPosition["image"]}"' if hasImage else f''
returnstr += f' -thumb "{nextPosition["thumb"]}"' if hasThumb else f' -thumb <image>'
returnstr += f' -footer "!e <area name>\nFor the Help Page:\n!help e\n\n{combat().me if combat() else "<-- Not in Combat -->"}"'
return returnstr
</drac2>