embed -title "Configuring Job Settings" -thumb <image> -footer "Usage - !dt work save -quan (skill) -qual (skill or tool|ability) -relation (charisma skill)"
<drac2>
if str(ctx.channel.id) not in "772364979898417162, 746529962361749594":
  return f' -title "{name} attempts to configure work..." -desc "BUT! You are in the wrong channel" -thumb <image> -f "Fix|Go do your work configs in  #avrae-temple channel"'
# set primary variables
pargs,me,returnstr = argparse(&ARGS&),character(),""
errstr = f' -f "Usage| `!dt work save -quan [skill] -qual [skill or tool|ability] -relation [charisma skill]`"\n '\
               f' -f "Example | Steve will work fishing. He will use his athletics (con) for quantity of work, Fishing '\
               f' Tackle and Wisdom for his quality, and persuasion to sell his items\n ' \
               f' `!dt work save -quan ath -qual fish|wis -relation pers`"'
jobstr = f' -t 90 -f "Error| You must set your job first with `!dt work job -set \\"jobname\\""`'
charskills = "persuasiondeceptionperformanceintimidation"
qualskill = ""

# variables required for Tools
hasTools = True if exists("pTools") else False
hasToolsE = True if exists("eTools") else False
isTool = False
isToolE = False
availTools = pTools.split(",") if hasTools else ""
availToolsE = eTools.split(",") if hasToolsE else ""

#Artificer Checks
art_infu = infusions if exists("infusions") else ""
art_level = int(ArtificerLevel) if exists("ArtificerLevel") else 0

# variables for arguments
qualarg, quanarg, relationarg = pargs.get("qual"),pargs.get("quan"),pargs.get("relation")
qualargs = qualarg[0].split("|") if qualarg else ""

# Error Checking
if not exists("RosemereJob") or RosemereJob == "":
  return jobstr
if not qualarg or not relationarg or not quanarg or relationarg[0] not in charskills:
  return errstr

# Tool Checking
else:
  for x in availTools:
    if qualargs[0].lower() in x.lower():
      qualskill = x[1:] if x[1] == "" else x
      isTool = True
  for x in availToolsE:
    if qualargs[0].lower() in x.lower():
      qualskill = x[1:] if x[1] == "" else x
      isTool = True
      isToolE = True

# passing quality ability
  for x, y in me.skills:
      if not isTool and qualargs[1].lower() in x.lower():
        qualability = x
        qualabmod = y.value

# checks the quantity skill in skills are assignes the skill name and skill bonus
  for x, y in me.skills:
    if quanarg[0].lower() in x.lower():
      quanskill = x
      quanmod =floor(proficiencyBonus*y.prof)+y.bonus+constitutionMod
      returnstr +=f' -f "Work Quantity| Is set to `{quanskill}`: +`{quanmod}`"\n'

# checks the relation skill and assigns the relation skill name and bonus
    if relationarg[0].lower() in x.lower():
      relationskill = x
      relationmod=y.value
      returnstr +=f' -f "Work Relations| Is set to `{relationskill}`:  +`{relationmod}`"\n'

# checks the qual ability and sets the name and bonus for the ability plus proficiency if you are using tools
    if (isTool or isToolE) and qualargs[1].lower() in x.lower():
      qualability = x
      # check for Tool of Armor Infusion
      qualmod = proficiencyBonus + y.value if not isToolE else (proficiencyBonus*2) + y.value
    #artificer Stusff
      if "Armor of Tools" in art_infu:
        qualmod += intelligenceMod
      if art_level >= 7: #adds flash of genius
        qualmod += intelligenceMod

    if not isTool and qualargs[0].lower() in x.lower():
      qualskill = x
      qualskmod = floor(proficiencyBonus*y.prof)+y.bonus
      qualmod = qualskmod+qualabmod
  if qualskill == "":
    return errstr
# builds the return strings
  returnstr += f' -f "Work Quality| Is set to `{qualskill}({qualability})`:  +`{qualmod}`"\n'
  settingstr = f'{quanskill},{quanmod},{isTool},{qualskill},{qualability},{qualmod},{relationskill},{relationmod}'

# saves all the settings
  me.set_cvar("JobSettings",settingstr)
return returnstr
</drac2>