embed -title "{{name}} is doing Crime Downtime" -desc "This takes up 2 Downtimes" -thumb <image> -color <color>

<drac2> # timestamp stuff
calendar=load_json(get_gvar("1aec09a0-9e25-4700-9c2d-42d79cb0163b"))
hourOffset=calendar.get('hourOffset',0)+int(get('timezone',0))
baseYear=calendar.get("yearOffset",1970)
Time=time()+(3600*hourOffset)
totalDayCount=int((Time)//86400)
yearsPassed=totalDayCount//calendar.length
numLeapYears=len([x for x in range(baseYear,baseYear+yearsPassed-4) if x//calendar.get('leapCycle',4)==x/calendar.get('leapCycle',4)]) if calendar.get('leapCycle') else 0
yearStartDay=yearsPassed*calendar.length+numLeapYears
totalDays=totalDayCount-yearStartDay
year=int((totalDayCount-numLeapYears-1)//calendar.length)+baseYear
isLeapYear=year//calendar.get('leapCycle',4)==year/calendar.get('leapCycle',4) if numLeapYears else 0
calendarDay=totalDays%(calendar.length+isLeapYear) or calendar.length+isLeapYear
hour=int(Time%86400//3600)
minute=int(Time%86400%3600//60)
second=int(Time%86400%3600%60)
monthLengths=[x.length+(isLeapYear and x.name==calendar.get('leapMonth','February')) for x in calendar.months]
day,month=calendarDay,1
[(day:=day-monthLengths[x],month:=month+1) for x in range(len(monthLengths)) if month>x and day>monthLengths[x]]
#timestamp=f'{month:02}/{day:02}/{str(year)[2:]} ({hour:02}:{minute:02}:{second:02})'
timestamp=f'{month:02}.{day:02}.{str(year)[2:]}'
</drac2>

<drac2>
me, returnstr, downtime = character(), "", "crime"
results, disguise, tools, exp_tools = {timestamp:{downtime:{}}}, False, False, eTools if exists("eTools") else ""
hiddenPass, stealPass, hiddenBonusStr, stealBonusStr = False, False, "", ""
# first first check to see if you are in the right channel
if str(ctx.channel.id) not in "746529962361749594, 773790279530184714":
  return f' -f "Error|Go do your crime downtime in the #downtime channel"'

# first check to see if you even have DT left for the day.
if exists("DTTrack"):
    workdata = load_json(DTTrack)
    if timestamp not in workdata:
        pass
    else:
        return f' -f "Error|You already did downtime for today. Come back tomorrow"'
        #err("You have already did downtime for today. Come back tomorrow")
else:
    character().set_cvar("DTTrack",dump_json(results)) if not exists("DTTrack") else 0
    workdata = load_json(DTTrack)


# first roll is investigation or perception, whatever is higher.
# if you have a fmailiar, you can have advantage on this check
hasFamiliar = True if exists("familiarData") else False
isObservant = False if not exists("feats") else True if "Observant" in feats else False
if me.skills.perception.value > me.skills.investigation.value:
    scoutSkill = "perception"
    if hasFamiliar:
        scoutRoll = me.skills.perception.d20(True)
        scoutBonusStr = " - Using Familiar"
    elif isObservant:
        scoutRoll = me.skills.perception.d20(True)
        scoutBonusStr = " - is Observant"
    else:
        me.skills.perception.d20()
        scoutBonusStr = ""
else:
    scoutSkill = "investigation"
    if hasFamiliar:
        scoutRoll = me.skills.investigation.d20(True)
        scoutBonusStr = " - Using Familiar"
    elif isObservant:
        scoutRoll = me.skills.investigation.d20(True)
        scoutBonusStr = " - is Observant"
    else:
        scoutRoll = me.skills.investigation.d20()
        scoutBonusStr = ""
scoutResult = vroll(scoutRoll)
#checks for a pass and sets the multipler for gains
multipliers = [3,2,1,.5,.2,0]
minrolls = [20,18,15,12,10,0]
targets = ["noble","upperclass","middle class","commoner","poor","failed to find anyone"]
pointer = 0
for x in minrolls:
    if scoutResult.total > x:
        earnMultiplier = multipliers[pointer]
        crimeTarget = targets[pointer]
        break
    else:
        pointer += 1
returnstr += f' -f "Scouting Roll|*{scoutSkill.title()}{scoutBonusStr}*\n{scoutResult.full}\n`{crimeTarget.title()}` for a multiplier of `{earnMultiplier}`"'

# next rolls for Hidden Roll
if earnMultiplier == 0:
    returnstr += f' -f "Hidden Roll| None, you didn\'t find anyone"'
else:
    # sets the DC for this roll
    hiddenRollDC = vroll(f'2d10+{level}')
    #checks for a Disguise Kit in your bag or if you have alterself / disguise self in spellbook
    if "Pass without Trace" in me.spellbook:
        hiddenRoll = me.skills.stealth.d20(True, mod_override=me.skills.stealth.value+10)
        hiddenBonusStr = "Using Pass without Trace"
    elif "disguise" in bags.lower():
        hiddenRoll = me.skills.stealth.d20(True)
        hiddenBonusStr = "Using Disguise Kit"
    elif "Alter Self" in me.spellbook:
        hiddenRoll = me.skills.stealth.d20(True)
        hiddenBonusStr = "Using Alter Self Spell"
    elif "Disguise Self" in me.spellbook:
        hiddenRoll = me.skills.stealth.d20(True)
        hiddenBonusStr = "Using Disguise Self Spell"
    elif "Invisibility" in me.spellbook:
        hiddenRoll = me.skills.stealth.d20(True)
        hiddenBonusStr = "Using Invisibility Spell"
    else:
        hiddenRoll = me.skills.stealth.d20()
    hiddenResult = vroll(hiddenRoll)
    hiddenPass = True if hiddenResult.total >= hiddenRollDC.total else False
    returnstr += f' -f "Hidden Roll|*Stealth - {hiddenBonusStr}*\n**DC**: {hiddenRollDC.full}\n{hiddenResult.full} - {"**PASS**" if hiddenPass else "**FAIL**"}"'

# next rolls for Sleight of Hand
if earnMultiplier == 0 or hiddenPass == False:
    returnstr += f' -f "Stealing Roll| Nobody to Steal from!"'
else:
    stealRollDC = vroll(f'2d10+{level}')
    # checks for thieves tools
    if "thieve" in bags.lower():
        steal_mod = 0
        if exists("pTools"):
            if "Thieve" in pTools:
                steal_mod = proficiencyBonus
        elif exists("eTools"):
            if "Thieve" in eTools:
                steal_mod = proficiencyBonus*2

        stealRoll = me.skills.dexterity.d20(True)+"+"+steal_mod
        tools = True
        stealBonusStr = "Using Thieve's Tools"
    else:
        stealRoll = me.skills.sleightOfHand.d20()
    stealResult = vroll(stealRoll)
    stealPass = True if stealResult.total >= stealRollDC.total else False
    returnstr += f' -f "Steal Roll|*Sleight of Hand - {stealBonusStr}*\n**DC**: {stealRollDC.full}\n{stealResult.full} - {"**PASS**" if stealPass else "**FAIL**"}"'

#calculate gains
# open up your coin purse
bagsLoaded=load_json(bags) #load the bags
pouch=([x for x in bagsLoaded if x[0]=="Coin Pouch"])[0] #load the coinpouch
ogp = pouch[1]['gp'] # what gp was before?
osp = pouch[1]['sp'] #what was sp before

if earnMultiplier == 0 or hiddenPass == False or stealPass == False:
    returnstr += f' -f "Earnings|You have not earned anything. This encounter cost you `2 gp`\n'
    ngp = ogp-2
    nsp = osp
else:
    coinsEarned = (2*earnMultiplier)
    nsp = (int(coinsEarned)-coinsEarned)*10
    coinsEarned = int(coinsEarned)
    returnstr += f' -f "Earnings|You earned `2` gp times `{earnMultiplier}` equals `{coinsEarned}`\n'
    ngp = ogp + coinsEarned
    nsp = nsp + osp
returnstr += f'`{ogp}` gp -> `{ngp}` gp"'
pouch[1].update({'gp':ngp, 'sp':nsp}) #updates new quantities locally
pouch in bagsLoaded or bagsLoaded.append(pouch)
me.set_cvar("bags",dump_json(bagsLoaded)) #dumps the coins back to the cvar
# sets the downtime block
results[timestamp][downtime].update({"1": hiddenPass, "2": stealPass})
workdata.update(results)
me.set_cvar("DTTrack",dump_json(workdata))
return returnstr

</drac2>