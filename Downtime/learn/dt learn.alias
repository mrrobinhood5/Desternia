tembed -thumb <image> -color <color>
<drac2>
calendar=load_json(get_gvar("1aec09a0-9e25-4700-9c2d-42d79cb0163b"))
hourOffset=calendar.get('hourOffset',0)+int(get('timezone',0))
baseYear=calendar.get("yearOffset",1970)
Time=time()+(3600*hourOffset)
totalDayCount=int((Time)//86400)
yearsPassed=totalDayCount//calendar.length
numLeapYears=len([x for x in range(baseYear,baseYear+yearsPassed-4) if x//calendar.get('leapCycle',4)==x/calendar.get('leapCycle',4)]) if calendar.get('leapCycle') else 0
yearStartDay=yearsPassed*calendar.length+numLeapYears
totalDays=totalDayCount-yearStartDay
year=int((totalDayCount-numLeapYears-1)//calendar.length)+baseYear
isLeapYear=year//calendar.get('leapCycle',4)==year/calendar.get('leapCycle',4) if numLeapYears else 0
calendarDay=totalDays%(calendar.length+isLeapYear) or calendar.length+isLeapYear
hour=int(Time%86400//3600)
minute=int(Time%86400%3600//60)
second=int(Time%86400%3600%60)
monthLengths=[x.length+(isLeapYear and x.name==calendar.get('leapMonth','February')) for x in calendar.months]
day,month=calendarDay,1
[(day:=day-monthLengths[x],month:=month+1) for x in range(len(monthLengths)) if month>x and day>monthLengths[x]]
timestamp_long=f'{month:02}.{day:02}.{str(year)[2:]} ({hour:02}:{minute:02}:{second:02})'
timestamp=f'{month:02}.{day:02}.{str(year)[2:]}'
</drac2>
<drac2>
# defines primary variables
pArgs, helpstr, returnstr, me, isComplete, learnTrack = argparse(&ARGS&), "", "", character(), False, {"learn":{}}
#defines secondary variables
rr = 2 if not pArgs.get("part") else 1
# defines the roll strings
rollstr = ['1d20+', '2d20kh1+', '3d20kh1+', '2d20kl1+'][pArgs.adv()]
# add a datetimestamp gvar
get_gvar("9315e3d7-9bba-4f30-ab51-411307741179")
returnstr += f' -title "Learning Downtime for {timestamp}" '
# defines the help string
helpstr += f' -desc "You can spend your time learning new skills, languages, and tools. You can do so **with** or **without** a mentor.' \
           f' Ability for learning is **Intelligence**"' \
           f' -f "LEARNING|```200 - ((( INT x 2 ) - 20) x 10) = Total Number of Downtimes (minimum of 20) ```' \
           f' - If you train with a mentor, you can **HALF** that number (rounded up) \n ' \
           f' - You can only do Learning for 2 DT per day rolling with a DC 10 **Intelligence** check \n'\
           f' - Training Cost is 1 gp per day, regardless of how many checks you passed or if you used 1 or 2 DT \n' \
           f' - You have 6 Learning Slots. Languages take up 1 Slot, Tools take up 2 Slots, Feats take up 3 Slots" ' \
           f' -f "EXAMPLE|```You are a commoner with 12 INT and wants to learn Elvish from a Wood Elf mentor, twice a day.\n' \
           f' Multiply 12 (INT) by 2 = 24\n' \
           f' Subtract 20 from 24 = 4\n' \
           f' Multiply 4 by 10 = 40\n' \
           f' Subtract 40 from 200 = 160 Downtimes (80 full days, 80gp minimum)\n' \
           f' Since you have a mentor:\n' \
           f' 160 divided by 4 = 40 Downtimes (20 full Days, 20gp minimum)\n' \
           f' Doing it twice a day:\n' \
           f' 40 divided by 2 = 20 Days (minimum) and 20gp (minimum)```"' \
           f' -f "SETUP|```!dt learn set -lang \\"Language\\" -mentor \\"Mentor Name\\" ``` \n ' \
           f' **Running Setup after starting training will result in progress to reset**"' \
           f' -f "USAGE|```!dt learn -lang \"Language\" [part]```"'

# error checks to see if there is any downtime left for the day
if not exists("DTTrack"):
    return f' -f "ERROR|Re run setup with `!dt learn set`" '
dtHistory = load_json(DTTrack)
if timestamp in dtHistory:
    todaysDT = dtHistory[timestamp]
    dtcount = 0
    for a,b in todaysDT.items():
        for c,d in b.items():
            dtcount += 1
    if dtcount >= 2:
        return f' -f "ERROR|You already did your 2 downtimes for today. Come back tomorrow" '
    if dtcount == 1 and rr == 2:
        return f' -f "ERROR|You only have 1 DT left, you must run the command with `part` for part time" '
else:
    dtHistory.update({timestamp:{}})

if not &ARGS& or not exists("DTLearnLang"):
    return helpstr
#set up the info into the cvar
if pArgs.get("lang"):
    learnType = "language"
    language, mentor, ccName, learnStatus = get("DTLearnLang").split(",")
    hasMentor = False if mentor == "none" else True
    returnstr += f' -desc "Learning Language: `{language}` {"mentored by `"+mentor+"`" if hasMentor else "with `no one`. All alone :("} "'
    learnMod = str(me.skills.intelligence.value)
    prev_cc = me.get_cc(ccName)
if pArgs.get("tool"):
    learnType = "tool"
    tool, mentor, ccName, learnStatus = get("DTLearnTool").split(",")
    hasMentor = False if mentor == "none" else True
    returnstr += f' -desc "Learning Tools: `{tool}` {"mentored by `"+mentor+"`" if hasMentor else "with `no one`. All alone :("} "'
    learnMod = str(me.skills.intelligence.value)
    prev_cc = me.get_cc(ccName)

#does the rolls
if learnStatus == "True":
    returnstr += f' -f "COMPLETE| You already finished!" '
else:
    for myroll in range(rr):
        # checks to see if you are complete already before rolling
        attempt = vroll(rollstr+learnMod)
        critstr, attemptcrit= [['none', 1],['**CRIT SUCCESS +2**', 2], ['**CRIT FAIL -1**', -1]][attempt.result.crit]
        passDC = True if attempt.total >= 10 else False
        returnstr += f' -f "Roll #{myroll+1}|{attempt}\n{"Passed +1" if passDC and critstr == "none" else critstr if critstr != "none" else "No Progress"}" '
        me.mod_cc(ccName,attemptcrit) if passDC else me.mod_cc(ccName,attemptcrit) if attemptcrit == -1 else 0
        learnTrack["learn"].update({str(myroll+1):str(attempt.total)})
        if me.get_cc(ccName) >= me.get_cc_max(ccName):
            returnstr += f' -f "COMPLETE|You have completed {learnType} learning. It has been added to your known {learnType}s" '
            isComplete = True
            break

if isComplete:
    # add language to cvar
    if exists("languages"):
        prev_languages = get("languages").split(", ")
        prev_languages.append(language.capitalize())
        me.set_cvar("languages", ", ".join(prev_languages))
    else:
        me.set_cvar("languages", language.capitalize())
# adds complete flag to dt lang cvar
    learnStatus = "True"
    learnData = (language, mentor, ccName, learnStatus)
    me.set_cvar("DTLearnLang", ",".join(learnData))

#adds all the data to the learnedProficiencies Tracker
    protracker = {language:{"type":learnType, "proslots": 1, "mentor": mentor, "achieved":timestamp}}
    prodata = load_json(learnedProficiencies)
    prodata.update(protracker)
    me.set_cvar("learnedProficiencies", dump_json(prodata))

#push results back to the DTTrack CVAR
dtHistory[timestamp].update(learnTrack)
me.set_cvar("DTTrack", dump_json(dtHistory))
new_cc = me.get_cc(ccName)
returnstr += f' -f "Progress|{me.cc_str(ccName)}({new_cc-prev_cc:+})" '
return returnstr
</drac2>