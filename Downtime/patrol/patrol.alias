embed -title "{{name}} is doing Patrol Downtime" -desc "This takes up 2 Downtimes" -thumb <image> -color <color>

<drac2> # timestamp stuff
calendar=load_json(get_gvar("1aec09a0-9e25-4700-9c2d-42d79cb0163b"))
hourOffset=calendar.get('hourOffset',0)+int(get('timezone',0))
baseYear=calendar.get("yearOffset",1970)
Time=time()+(3600*hourOffset)
totalDayCount=int((Time)//86400)
yearsPassed=totalDayCount//calendar.length
numLeapYears=len([x for x in range(baseYear,baseYear+yearsPassed-4) if x//calendar.get('leapCycle',4)==x/calendar.get('leapCycle',4)]) if calendar.get('leapCycle') else 0
yearStartDay=yearsPassed*calendar.length+numLeapYears
totalDays=totalDayCount-yearStartDay
year=int((totalDayCount-numLeapYears-1)//calendar.length)+baseYear
isLeapYear=year//calendar.get('leapCycle',4)==year/calendar.get('leapCycle',4) if numLeapYears else 0
calendarDay=totalDays%(calendar.length+isLeapYear) or calendar.length+isLeapYear
hour=int(Time%86400//3600)
minute=int(Time%86400%3600//60)
second=int(Time%86400%3600%60)
monthLengths=[x.length+(isLeapYear and x.name==calendar.get('leapMonth','February')) for x in calendar.months]
day,month=calendarDay,1
[(day:=day-monthLengths[x],month:=month+1) for x in range(len(monthLengths)) if month>x and day>monthLengths[x]]
#timestamp=f'{month:02}/{day:02}/{str(year)[2:]} ({hour:02}:{minute:02}:{second:02})'
timestamp=f'{month:02}.{day:02}.{str(year)[2:]}'
</drac2>

<drac2>
#TODO Add a gold converter so it doesnt add decimals to the pouch
me, returnstr, downtime, targetCriminal = character(), "", "patrol", %*%
results, disguise, tools= {timestamp:{downtime:{}}}, False, False
hiddenPass, stealPass, hiddenBonusStr, stealBonusStr = False, False, "", ""
# first first check to see if you are in the right channel
if str(ctx.channel.id) not in "746529962361749594, 773790279530184714":
  return f' -f "Error|Go do your patrol downtime in the #downtime channel"'

# first check to see if you even have DT left for the day.
# if exists("DTTrack"):
#     workdata = load_json(DTTrack)
#     if timestamp not in workdata:
#         pass
#     else:
#         return f' -f "Error|You already did downtime for today. Come back tomorrow"'
#         #err("You have already did downtime for today. Come back tomorrow")
# else:
#     character().set_cvar("DTTrack",dump_json(results)) if not exists("DTTrack") else 0
#     workdata = load_json(DTTrack)


# first roll is investigation or perception, whatever is higher.
if me.skills.perception.value > me.skills.investigation.value:
    scoutSkill = "perception"
    scoutRoll = me.skills.perception.d20()
else:
    scoutSkill = "investigation"
    scoutRoll = me.skills.investigation.d20()
scoutResult = vroll(scoutRoll)

# if you passed a name and number, do a check rq:
if targetCriminal == "":
    pass
else:
    targetCriminal = targetCriminal.split(" ")
    returnstr += f' -f "Attempting|To catch `{targetCriminal[0].title()}` who rolled a `{targetCriminal[1]}`" '
    returnstr += f' -f "Scouting Roll|*{scoutSkill.title()}*\n{scoutResult.full}\n"'
    if scoutResult.total >= int(targetCriminal[1]):
        returnstr += f' -f "SUCCESS| You have caught `{targetCriminal[0].title()}`, RP your interaction with them. "'
    else:
        returnstr += f' -f "FAIL| You have did not catch `{targetCriminal[0].title()}`. They are very very sneaky, sir "'
    return returnstr

# if no target was provided, continue with a randgen criminal
#checks for a pass and sets the multipler for gains
minrolls = [30,25,19,16,10,0]
multipliers = [3,2,1,.5,.2,0]
targets = ["Terrorist/Spies threat","major crime","medium crime","minor crime","petty crime","failed to find anyone"]
pointer = 0
for x in minrolls:
    if scoutResult.total > x:
        earnMultiplier = multipliers[pointer]
        crimeTarget = targets[pointer]
        break
    else:
        pointer += 1
returnstr += f' -f "Scouting Roll|*{scoutSkill.title()}*\n{scoutResult.full}\n`{crimeTarget.title()}` for a multiplier of `{earnMultiplier}`"'

# next rolls for Hidden Roll
if earnMultiplier == 0:
    returnstr += f' -f "Stealth Roll| None, you didn\'t find anyone"'
else:
    # sets the DC for this roll
    hiddenRollDC = vroll(f'2d10+{floor(level/2)}')
    #checks for the best combo
    stealthBonuses = [dexterityMod+(me.skills.stealth.prof * proficiencyBonus), intelligenceMod+(me.skills.stealth.prof * proficiencyBonus), dexterityMod+(me.skills.stealth.prof * proficiencyBonus)]
    stealthAbilities = ["dexterity", "intelligence", "wisdom"]
    stealthRolls = [me.skills.stealth.d20(), me.skills.stealth.d20(mod_override=intelligenceMod + (me.skills.stealth.prof * proficiencyBonus)),me.skills.stealth.d20(mod_override=wisdomMod + (me.skills.stealth.prof * proficiencyBonus))]
    hiddenRoll = stealthRolls[stealthBonuses.index(max(stealthBonuses))]
    hiddenAbility = stealthAbilities[stealthBonuses.index(max(stealthBonuses))]
    # #checks for a Disguise Kit in your bag or if you have alterself / disguise self in spellbook
    # if "Pass without Trace" in me.spellbook:
    #     hiddenRoll = me.skills.stealth.d20(mod_override=me.skills.stealth.value+10)
    #     hiddenBonusStr = "Using Pass without Trace"
    # elif "disguise" in bags.lower():
    #     hiddenRoll = me.skills.stealth.d20(True)
    #     hiddenBonusStr = "Using Disguise Kit"
    # elif "Alter Self" in me.spellbook:
    #     hiddenRoll = me.skills.stealth.d20(True)
    #     hiddenBonusStr = "Using Alter Self Spell"
    # elif "Disguise Self" in me.spellbook:
    #     hiddenRoll = me.skills.stealth.d20(True)
    #     hiddenBonusStr = "Using Disguise Self Spell"
    # elif "Invisibility" in me.spellbook:
    #     hiddenRoll = me.skills.stealth.d20(True)
    #     hiddenBonusStr = "Using Invisibility Spell"
    # else:
    #     hiddenRoll = me.skills.stealth.d20()
    # TODO build a list of which combos are best dex int or wis
    hiddenResult = vroll(hiddenRoll)
    hiddenPass = True if hiddenResult.total >= hiddenRollDC.total else False
    returnstr += f' -f "Stealthy Roll|*Stealth({hiddenAbility})*\n**DC**: {hiddenRollDC.full}\n{hiddenResult.full} - {"**PASS**" if hiddenPass else "**FAIL**"}"'

# next rolls for Apprehension
if earnMultiplier == 0 or hiddenPass == False:
    returnstr += f' -f "Apprehend Roll| Nobody to catch!"'
else:
    apprehendRollDC = vroll(f'2d10+{floor(level/2)}')
    # compare athletics or persuasion
    if me.skills.athletics.value > me.skills.persuasion.value:
        apprehendSkill = "athletics"
        apprehendRoll = me.skills.athletics.d20()
    else:
        apprehendSkill = "persuasion"
        apprehendRoll = me.skills.persuasion.d20()
    # checks for thieves tools
    # if "thieve" in bags.lower():
    #     stealRoll = me.skills.sleightOfHand.d20(True)
    #     tools = True
    #     stealBonusStr = "Using Thieve's Tools"
    # else:
    #     stealRoll = me.skills.sleightOfHand.d20()
    apprehendResult = vroll(apprehendRoll)
    apprehendPass = True if apprehendResult.total >= apprehendRollDC.total else False
    returnstr += f' -f "Apprehend Roll|*{apprehendSkill.title()}*\n**DC**: {apprehendRollDC.full}\n{apprehendResult.full} - {"**PASS**" if apprehendPass else "**FAIL**"}"'

#calculate gains
# open up your coin purse
# bagsLoaded=load_json(bags) #load the bags
# pouch=([x for x in bagsLoaded if x[0]=="Coin Pouch"])[0] #load the coinpouch
# ogp = pouch[1]['gp'] # what gp was before?

# if earnMultiplier == 0 or hiddenPass == False or stealPass == False:
#     returnstr += f' -f "Earnings|You have not earned anything. This encounter cost you `2 gp`\n'
#     ngp = ogp-2
# else:
#     coinsEarned = (2*earnMultiplier)
#     returnstr += f' -f "Earnings|You earned `2` gp times `{earnMultiplier}` equals `{coinsEarned}`\n'
#     ngp = ogp + coinsEarned
# returnstr += f'`{ogp}` gp -> `{ngp}` gp"'
# pouch[1].update({'gp':ngp}) #updates new quantities locally
# pouch in bagsLoaded or bagsLoaded.append(pouch)
# me.set_cvar("bags",dump_json(bagsLoaded)) #dumps the coins back to the cvar
# sets the downtime block
# results[timestamp][downtime].update({"1": hiddenPass, "2": stealPass})
# workdata.update(results)
# me.set_cvar("DTTrack",dump_json(workdata))
return returnstr

</drac2>